<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>GameGenie - AI Game Generator</title>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.16/dist/tailwind.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.9.0/styles/github.min.css">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.9.0/highlight.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/js-beautify/1.14.0/beautify-html.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/prism.min.js"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/themes/prism-tomorrow.min.css">
    <style>
        /* Custom scrollbar */
        ::-webkit-scrollbar {
            width: 8px;
        }
        ::-webkit-scrollbar-track {
            background: #2d3748;
        }
        ::-webkit-scrollbar-thumb {
            background: #4a5568;
            border-radius: 4px;
        }
        ::-webkit-scrollbar-thumb:hover {
            background: #718096;
        }
    </style>
</head>
<body class="bg-gray-900 text-gray-100 font-sans antialiased">
    <div class="container mx-auto px-4 py-8 max-w-6xl">
        <div class="bg-gray-800 shadow-2xl rounded-3xl overflow-hidden border-4 border-indigo-600">
            <div class="bg-gradient-to-r from-indigo-700 to-purple-600 text-white py-8 px-10">
                <div class="flex items-center justify-between">
                    <div>
                        <h1 class="text-5xl font-extrabold tracking-tight flex items-center">
                            <i class="fas fa-gamepad mr-4"></i> GameGenie
                            <span class="ml-4 bg-purple-500 text-sm px-3 py-1 rounded-full">AI-Powered</span>
                        </h1>
                        <p class="mt-3 text-indigo-100 text-xl">Unleash Your Game Development Creativity</p>
                    </div>
                    <div class="hidden md:block">
                        <div class="bg-white/10 rounded-full p-4">
                            <i class="fas fa-cubes text-white text-4xl"></i>
                        </div>
                    </div>
                </div>
            </div>

            <div class="p-8 bg-gray-900">
                <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                    <div class="space-y-6">
                        <div>
                            <label for="gamePrompt" class="block text-sm font-medium text-gray-300 mb-2">Game Concept</label>
                            <textarea
                                id="gamePrompt"
                                rows="4"
                                class="w-full rounded-lg bg-gray-700 border-gray-600 text-white placeholder-gray-400 focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500 transition duration-200"
                                placeholder="Describe your dream game! Examples:&#10;• Retro pixel art Snake game&#10;• Physics-based puzzle platformer&#10;• Space invaders with unique mechanics&#10;• Interactive memory challenge"
                                aria-describedby="gamePromptHint"
                            ></textarea>
                            <p id="gamePromptHint" class="mt-2 text-sm text-gray-400">Tip: The more specific your description, the better the game generation.</p>
                        </div>

                        <div class="grid grid-cols-2 gap-4">
                            <div>
                                <label for="complexityLevel" class="block text-sm font-medium text-gray-300 mb-2">Game Complexity</label>
                                <select
                                    id="complexityLevel"
                                    class="w-full rounded-lg bg-gray-700 border-gray-600 text-white focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500"
                                >
                                    <option value="basic">Basic</option>
                                    <option value="intermediate" selected>Intermediate</option>
                                    <option value="advanced">Advanced</option>
                                </select>
                            </div>
                            <div>
                                <label for="gameStyle" class="block text-sm font-medium text-gray-300 mb-2">Game Style</label>
                                <select
                                    id="gameStyle"
                                    class="w-full rounded-lg bg-gray-700 border-gray-600 text-white focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500"
                                >
                                    <option value="minimal">Minimal</option>
                                    <option value="professional" selected>Professional</option>
                                    <option value="vibrant">Vibrant</option>
                                </select>
                            </div>
                        </div>
                    </div>

                    <div>
                        <div class="bg-gray-800 rounded-lg p-4 h-full border border-gray-700 space-y-4">
                            <div>
                                <h3 class="text-xl font-semibold text-white mb-3">
                                    <i class="fas fa-lightbulb mr-3"></i>
                                    Game Generation Tips
                                </h3>
                                <ul class="space-y-2 text-sm text-gray-300">
                                    <li><i class="fas fa-check-circle text-green-500 mr-3"></i> Be specific about game mechanics</li>
                                    <li><i class="fas fa-check-circle text-green-500 mr-3"></i> Describe core gameplay loop</li>
                                    <li><i class="fas fa-check-circle text-green-500 mr-3"></i> Mention any unique twists</li>
                                    <li><i class="fas fa-check-circle text-green-500 mr-3"></i> Consider player interactions</li>
                                    <li><i class="fas fa-check-circle text-green-500 mr-3"></i> Think about visual style</li>
                                </ul>
                            </div>

                            <div>
                                <h3 class="text-xl font-semibold text-white mb-3">
                                    <i class="fas fa-magic mr-3"></i>
                                    AI Generation Options
                                </h3>
                                <div class="space-y-2">
                                    <label class="inline-flex items-center">
                                        <input 
                                            type="checkbox" 
                                            id="optimizeCodeCheck" 
                                            class="form-checkbox text-indigo-600 bg-gray-700 border-gray-600"
                                            checked
                                        >
                                        <span class="ml-2 text-sm text-gray-300">Optimize Generated Code</span>
                                    </label>
                                    <label class="inline-flex items-center">
                                        <input 
                                            type="checkbox" 
                                            id="explainCodeCheck" 
                                            class="form-checkbox text-indigo-600 bg-gray-700 border-gray-600"
                                        >
                                        <span class="ml-2 text-sm text-gray-300">Generate Code Explanation</span>
                                    </label>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="mt-6 flex space-x-4">
                    <button
                        id="generateBtn"
                        class="flex-1 bg-indigo-600 text-white py-4 px-6 rounded-lg hover:bg-indigo-700 transition duration-300 font-semibold flex items-center justify-center space-x-3 transform hover:scale-105"
                        aria-label="Generate Game"
                    >
                        <i class="fas fa-magic mr-3"></i>
                        <span>Generate Game</span>
                    </button>
                    <button
                        id="deleteGameBtn"
                        class="bg-red-600 text-white py-4 px-6 rounded-lg hover:bg-red-700 transition duration-300 font-semibold flex items-center justify-center space-x-3 hidden transform hover:scale-105"
                        aria-label="Delete Game"
                    >
                        <i class="fas fa-trash-alt mr-3"></i>
                        <span>Delete Game</span>
                    </button>
                </div>

                <div id="loadingSpinner" class="mt-6 text-center hidden">
                    <div class="inline-block animate-spin w-16 h-16 border-[6px] border-current border-t-transparent text-indigo-600 rounded-full" role="status">
                        <span class="sr-only">Loading...</span>
                    </div>
                    <p class="mt-4 text-gray-300 text-lg" id="loadingText">Crafting your game...</p>
                </div>

                <div id="codeExplanationContainer" class="mt-6 hidden">
                    <div class="bg-gray-800 rounded-lg p-6">
                        <h3 class="text-2xl font-bold text-white mb-4">
                            <i class="fas fa-book-open mr-3"></i>
                            Code Explanation
                        </h3>
                        <div id="codeExplanationText" class="text-gray-300"></div>
                    </div>
                </div>

                <div id="previewContainer" class="mt-6 hidden">
                    <div class="flex justify-between items-center mb-4">
                        <h2 class="text-3xl font-bold text-white">
                            <i class="fas fa-gamepad mr-3"></i>
                            Game Preview
                        </h2>
                        <div class="flex space-x-3">
                            <button id="fullscreenBtn" class="text-indigo-300 hover:text-white transition duration-300 flex items-center bg-gray-800 px-3 py-2 rounded-lg" aria-label="Fullscreen">
                                <i class="fas fa-expand mr-2"></i>
                                Fullscreen
                            </button>
                            <button id="reloadGameBtn" class="text-green-300 hover:text-white transition duration-300 flex items-center bg-gray-800 px-3 py-2 rounded-lg" aria-label="Reload Game">
                                <i class="fas fa-sync mr-2"></i>
                                Reload
                            </button>
                        </div>
                    </div>
                    <div id="gamePreview" class="bg-gray-800 rounded-lg p-4 min-h-[600px] relative border-2 border-gray-700 shadow-inner overflow-hidden">
                        <div class="absolute inset-0 flex items-center justify-center text-gray-400 text-xl">
                            Game will appear here
                        </div>
                    </div>
                </div>

                <div id="codeContainer" class="mt-6 hidden">
                    <div class="flex justify-between items-center mb-4">
                        <h2 class="text-3xl font-bold text-white">
                            <i class="fas fa-code mr-3"></i>
                            Game Source Code
                        </h2>
                        <div class="flex space-x-3">
                            <button id="copyCodeBtn" class="text-indigo-300 hover:text-white transition duration-300 flex items-center bg-gray-800 px-3 py-2 rounded-lg" aria-label="Copy Code">
                                <i class="fas fa-copy mr-2"></i>
                                Copy Code
                            </button>
                            <button id="downloadCodeBtn" class="text-green-300 hover:text-white transition duration-300 flex items-center bg-gray-800 px-3 py-2 rounded-lg" aria-label="Download Code">
                                <i class="fas fa-download mr-2"></i>
                                Download
                            </button>
                        </div>
                    </div>
                    <pre class="rounded-lg max-h-[500px] overflow-auto"><code id="generatedCode" class="language-html"></code></pre>
                </div>
            </div>
        </div>
    </div>

    <script>

        // Enhanced Game Generation Prompt Creator
        function createDetailedPrompt(contextPrompt, complexity, style, optimize, explain) {
            const complexityInstructions = {
                basic: 'Create a simple, intuitive game with straightforward mechanics and minimal complexity.',
                intermediate: 'Develop a game with multiple interactive elements, moderate challenge, and engaging gameplay.',
                advanced: 'Design a sophisticated game with complex mechanics, advanced state management, and multiple game systems.'
            };

            const styleInstructions = {
                minimal: 'Use a clean, minimalist design with focus on core gameplay mechanics.',
                professional: 'Implement a polished, professional aesthetic with smooth interactions and refined UI.',
                vibrant: 'Create a visually dynamic game with colorful graphics and playful animations.'
            };

            const optimizationInstructions = optimize 
                ? 'Prioritize code efficiency, performance optimization, and clean, modular structure.' 
                : 'Focus primarily on functional implementation.';

            const explanationRequirement = explain 
                ? 'Include detailed comments explaining key code sections and game mechanics.' 
                : '';

            return `Generate a complete, self-contained HTML5 game with these specifications:

CORE REQUIREMENTS:
- ENTIRE application in ONE HTML file
- NO external dependencies
- IMMEDIATELY runnable in browser
- FULLY SELF-EXECUTABLE
- Cross-browser compatible
- Mobile-responsive

GAME CONTEXT:
${contextPrompt}

COMPLEXITY STRATEGY:
${complexityInstructions[complexity]}

VISUAL DESIGN:
${styleInstructions[style]}

CODE OPTIMIZATION:
${optimizationInstructions}

ADDITIONAL INSTRUCTIONS:
${explanationRequirement}

CRITICAL: Produce RAW, EXECUTABLE CODE without additional explanatory text.`;
        }

        // Improved Error Handling Function
        function handleApiError(error) {
            console.error('Game Generation Error:', error);
            const loadingSpinner = document.getElementById('loadingSpinner');
            const loadingText = document.getElementById('loadingText');
            
            loadingText.innerHTML = `
                <span class="text-red-500">Generation Failed</span>
                <div class="bg-red-600/10 border border-red-500 rounded-lg p-3 mt-4 text-red-300">
                    <h4 class="font-bold mb-2">Possible Issues:</h4>
                    <ul class="list-disc list-inside text-left">
                        <li>Invalid or expired API Key</li>
                        <li>Network connectivity problems</li>
                        <li>API service temporarily unavailable</li>
                    </ul>
                    <small class="block mt-2">${error.message}</small>
                </div>
            `;
        }

        // AI Code Improvement Function
        async function improveGeneratedGame(originalCode, gamePrompt, complexity, style, optimize, explain) {
            const improvementPrompt = `Enhance the following HTML game code. Focus on:
            1. Code quality and readability
            2. Performance optimization
            3. Cross-browser compatibility
            4. Accessibility improvements
            
            Game Context: ${gamePrompt}
            Complexity: ${complexity}
            Style: ${style}
            
            Optimization Required: ${optimize ? 'Yes' : 'No'}
            Code Explanation Required: ${explain ? 'Yes' : 'No'}
            
            ORIGINAL CODE:
            ${originalCode}`;

            try {
                const savedApiKey = 'AIzaSyDZm9VpvHeGrS5YSYvZqTaL3q7tiXyH9dc';

                const response = await fetch(`https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash-latest:generateContent?key=${savedApiKey}`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        contents: [{ parts: [{ text: improvementPrompt }] }]
                    })
                });

                if (!response.ok) {
                    throw new Error(`API Error: ${response.status} - ${await response.text()}`);
                }

                const data = await response.json();
                return data.candidates[0].content.parts[0].text
                    .replace(/```html/g, '')
                    .replace(/```/g, '')
                    .trim();

            } catch (error) {
                console.error('Game Improvement Error:', error);
                return null;
            }
        }

        // Main Game Generation Event Listener
        document.getElementById('generateBtn').addEventListener('click', async () => {
            const gamePrompt = document.getElementById('gamePrompt').value.trim();
            const complexityLevel = document.getElementById('complexityLevel').value;
            const gameStyle = document.getElementById('gameStyle').value;
            const optimizeCode = document.getElementById('optimizeCodeCheck').checked;
            const explainCode = document.getElementById('explainCodeCheck').checked;

            const loadingSpinner = document.getElementById('loadingSpinner');
            const loadingText = document.getElementById('loadingText');
            const previewContainer = document.getElementById('previewContainer');
            const codeContainer = document.getElementById('codeContainer');
            const gamePreview = document.getElementById('gamePreview');
            const generatedCodeElement = document.getElementById('generatedCode');
            const deleteGameBtn = document.getElementById('deleteGameBtn');
            const codeExplanationContainer = document.getElementById('codeExplanationContainer');
            const codeExplanationText = document.getElementById('codeExplanationText');

            if (!gamePrompt) {
                alert('Please describe your game concept!');
                return;
            }

            // Reset UI
            loadingSpinner.classList.remove('hidden');
            previewContainer.classList.add('hidden');
            codeContainer.classList.add('hidden');
            codeExplanationContainer.classList.add('hidden');
            gamePreview.innerHTML = '';
            loadingText.textContent = 'Crafting your game...';

            try {
                const savedApiKey = 'AIzaSyDZm9VpvHeGrS5YSYvZqTaL3q7tiXyH9dc'

                const detailedPrompt = createDetailedPrompt(
                    gamePrompt, 
                    complexityLevel, 
                    gameStyle, 
                    optimizeCode, 
                    explainCode
                );

                const response = await fetch(`https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash-latest:generateContent?key=${savedApiKey}`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        contents: [{ parts: [{ text: detailedPrompt }] }]
                    })
                });

                if (!response.ok) {
                    throw new Error(`API Error: ${response.status} - ${await response.text()}`);
                }

                const data = await response.json();
                let gameCode = data.candidates[0].content.parts[0].text
                    .replace(/```html/g, '')
                    .replace(/```/g, '')
                    .trim();

                loadingText.textContent = 'Refining game code...';
                const improvedGameCode = await improveGeneratedGame(
                    gameCode, 
                    gamePrompt, 
                    complexityLevel, 
                    gameStyle, 
                    optimizeCode, 
                    explainCode
                );

                gameCode = improvedGameCode || gameCode;

                // Beautify HTML
                const beautifiedCode = html_beautify(gameCode, {
                    indent_size: 2,
                    wrap_line_length: 80
                });

                // Create game iframe
                const gameFrame = document.createElement('iframe');
                gameFrame.id = 'gameFrame';
                gameFrame.srcdoc = gameCode;
                gameFrame.style.width = '100%';
                gameFrame.style.height = '100%';
                gameFrame.style.border = 'none';
                gameFrame.style.position = 'absolute';
                gameFrame.style.top = '0';
                gameFrame.style.left = '0';

                gamePreview.innerHTML = '';
                gamePreview.appendChild(gameFrame);

                // Syntax highlighting
                generatedCodeElement.textContent = beautifiedCode;
                Prism.highlightElement(generatedCodeElement);

                // Optional code explanation
                if (explainCode) {
                    const explainPrompt = `Provide a detailed explanation of the following game code, breaking down its key components, mechanics, and implementation strategies:\n\n${beautifiedCode}`;
                    
                    const explanationResponse = await fetch(`https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash-latest:generateContent?key=${savedApiKey}`, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({
                            contents: [{ parts: [{ text: explainPrompt }] }]
                        })
                    });

                    const explanationData = await explanationResponse.json();
                    const explanation = explanationData.candidates[0].content.parts[0].text;
                    
                    codeExplanationText.textContent = explanation;
                    codeExplanationContainer.classList.remove('hidden');
                }

                // Update UI
                loadingSpinner.classList.add('hidden');
                previewContainer.classList.remove('hidden');
                codeContainer.classList.remove('hidden');
                deleteGameBtn.classList.remove('hidden');

            } catch (error) {
                handleApiError(error);
            }
        });

        // Remaining event listeners from previous implementation...
        // (Delete Game, Fullscreen, Reload, Copy Code, Download Code)
        document.getElementById('deleteGameBtn').addEventListener('click', () => {
            const gamePreview = document.getElementById('gamePreview');
            const previewContainer = document.getElementById('previewContainer');
            const codeContainer = document.getElementById('codeContainer');
            const deleteGameBtn = document.getElementById('deleteGameBtn');
            const codeExplanationContainer = document.getElementById('codeExplanationContainer');

            gamePreview.innerHTML = `
                <div class="absolute inset-0 flex items-center justify-center text-gray-400 text-xl">
                    Game will appear here
                </div>
            `;
            previewContainer.classList.add('hidden');
            codeContainer.classList.add('hidden');
            deleteGameBtn.classList.add('hidden');
            codeExplanationContainer.classList.add('hidden');
        });

        document.getElementById('fullscreenBtn').addEventListener('click', () => {
            const gameFrame = document.getElementById('gameFrame');
            
            if (gameFrame) {
                if (gameFrame.requestFullscreen) {
                    gameFrame.requestFullscreen();
                } else if (gameFrame.mozRequestFullScreen) {
                    gameFrame.mozRequestFullScreen();
                } else if (gameFrame.webkitRequestFullscreen) {
                    gameFrame.webkitRequestFullscreen();
                } else if (gameFrame.msRequestFullscreen) {
                    gameFrame.msRequestFullscreen();
                }
            }
        });

        document.getElementById('reloadGameBtn').addEventListener('click', () => {
            const gameFrame = document.getElementById('gameFrame');
            if (gameFrame) {
                gameFrame.contentWindow.location.reload();
            }
        });

        document.getElementById('copyCodeBtn').addEventListener('click', () => {
            const generatedCodeElement = document.getElementById('generatedCode');
            const copyBtn = document.getElementById('copyCodeBtn');
            
            navigator.clipboard.writeText(generatedCodeElement.textContent).then(() => {
                copyBtn.innerHTML = `
                    <i class="fas fa-check text-green-500 mr-2"></i>
                    Copied!
                `;
                
                setTimeout(() => {
                    copyBtn.innerHTML = `
                        <i class="fas fa-copy mr-2"></i>
                        Copy Code
                    `;
                }, 2000);
            }).catch(err => {
                console.error('Failed to copy code:', err);
                copyBtn.innerHTML = `
                    <i class="fas fa-exclamation-triangle text-red-500 mr-2"></i>
                    Copy Failed
                `;
                
                setTimeout(() => {
                    copyBtn.innerHTML = `
                        <i class="fas fa-copy mr-2"></i>
                        Copy Code
                    `;
                }, 2000);
            });
        });

        document.getElementById('downloadCodeBtn').addEventListener('click', () => {
            const generatedCodeElement = document.getElementById('generatedCode');
            const gamePrompt = document.getElementById('gamePrompt').value.trim();
            const gameCode = generatedCodeElement.textContent;
            const blob = new Blob([gameCode], { type: 'text/html' });
            const link = document.createElement('a');
            link.href = URL.createObjectURL(blob);
            link.download = `${gamePrompt.replace(/\s+/g, '_').toLowerCase()}_game.html`;
            link.click();
        });
    </script>
</body>
</html>
